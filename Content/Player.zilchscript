class Player : ZilchComponent
{
  [Dependency]
  var Transform : Transform;
  [Dependency]
  var RigidBody : RigidBody;
  [Dependency]
  var NetUser : NetUser;
  
  // Player info string used for logging.
  var PlayerInfo : String
  {
    get { return "`this.GameSession.NetPeer.Info` <Player #`this.NetUser.NetUserId`>"; }
  }
  
  // Player input, set directly by the owning client.
  // (The owning client has authority over these properties and replicates their state to the server.
  // Other clients are relayed the state of these properties through the server.)
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputUp : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputDown : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputLeft : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputRight : Boolean;
  
  var LastInputUp : Boolean;
  var LastInputDown : Boolean;
  var LastInputLeft : Boolean;
  var LastInputRight : Boolean;
  
  var SwordAction : Action;
  
  // Player movement force scalar.
  var Server_MovementScalar : Real = 7;
  var Server_WallMovementScalar : Real = 16;
  var Server_SwordTime : Real = 0.2;
  
  [ShaderInput]
  var AlbedoValue : Real4 = Colors.Red;
  
  function Initialize(init : CogInitializer)
  {
    this.AlbedoValue = Real4(Math.Abs(Random(this.NetUser.NetUserId).UnitReal3()), 1);
    
    // If we're the server, we're responsible for processing the player's inputs set by the owning client.
    if(this.NetUser.IsServer)
    {
      var rand = this.LevelSettings.RandomContext;
      this.Transform.WorldTranslation = Real3(rand.Range(-9, 9), rand.Range(-9, 9), 0);
      Zero.Connect(this.Space, Events.LogicUpdate, this.Server_OnLogicUpdate);
      Zero.Connect(this.Owner, Events.NetChannelIncomingPropertyChanged, this.Server_OnNetChannelIncomingPropertyChanged);
    }
    
    // We are a client and this player belongs to us?
    // (Remember, this logic is being run by everyone, that includes the server
    // and other clients, so we must check to see if this player is specifically ours.)
    if(this.NetUser.IsClientAndMine)
    {
      Zero.Connect(Zero.Keyboard, Events.KeyDown, this.Client_OnKeyDown);
      Zero.Connect(Zero.Keyboard, Events.KeyUp, this.Client_OnKeyUp);
    }
  }
  
  //
  // Client-Side Input Events
  //
  
  function Client_OnKeyDown(event : KeyboardEvent)
  {
    // Handle key state change.
    this.Client_OnKeyChanged(event, true);
  }
  function Client_OnKeyUp(event : KeyboardEvent)
  {
    // Handle key state change.
    this.Client_OnKeyChanged(event, false);
  }
  function Client_OnKeyChanged(event : KeyboardEvent, state : Boolean)
  {
    // Set input state.
    // (Since these input properties are client authoritative, the network system will automatically replicate these
    // changes to the server, which will accept the changes without question.)
    if(event.Key == Keys.W)
      this.InputUp = state;
    else if(event.Key == Keys.S)
      this.InputDown = state;
    else if(event.Key == Keys.A)
      this.InputLeft = state;
    else if(event.Key == Keys.D)
      this.InputRight = state;
  }
  
  //
  // Server-Side Update Events
  //
  
  var IsSwordSwinging : Boolean
  {
    get { return this.SwordAction != null && !this.SwordAction.Completed; }
  }
  
  function Server_OnLogicUpdate(event : UpdateEvent)
  {
    if (this.IsSwordSwinging)
      return;
    
    // Compute the player movement vector based on the client's input.
    var movement = Real3.Zero;
    
    
    // (These input property values are replicated to us from the owning client whenever their state changes.
    // We are still authoritative over the player's other properties, such as Translation and Rotation,
    // so clients are unable to cheat by trying to set their own position / orientation.)
    if(this.InputUp && !this.LastInputUp)
      movement = +Real3.YAxis;
    if(this.InputDown && !this.LastInputDown)
      movement = -Real3.YAxis;
    if(this.InputRight && !this.LastInputRight)
      movement = +Real3.XAxis;
    if(this.InputLeft && !this.LastInputLeft)
      movement = -Real3.XAxis;
    
    this.LastInputUp = this.InputUp;
    this.LastInputDown = this.InputDown;
    this.LastInputRight = this.InputRight;
    this.LastInputLeft = this.InputLeft;
    
    // Apply a force to move the player in the direction the client intended.
    if (movement == Real3.Zero)
      return;
    
    var scale = this.Server_MovementScalar;
    var segment = Segment(this.Transform.WorldTranslation, this.Transform.WorldTranslation + movement * 1.5);
    
    var results = this.Space.PhysicsSpace.CastSegment(segment, 100);
    foreach (var result in results)
    {
      if (result.ObjectHit == this.Owner)
        continue;
      
      scale = this.Server_WallMovementScalar;
      movement = -movement;
      break;
    }
    
    var swordCog = this.Owner.FindChildByName("Sword");
    
    if (Math.Abs(movement) == Real3.XAxis)
      swordCog.Transform.LocalRotation = Math.AxisAngle(Real3.ZAxis, Math.Pi / 2);
    else
      swordCog.Transform.LocalRotation = Quaternion.Identity;
    
    var seq = Action.Sequence(this.Owner.Actions);
    Action.Property(seq, @swordCog.Transform.LocalTranslation, movement, this.Server_SwordTime / 2.0, Ease.SinInOut);
    Action.Property(seq, @swordCog.Transform.LocalTranslation, Real3.Zero, this.Server_SwordTime / 2.0, Ease.SinInOut);
    this.SwordAction = seq;
  
    var currentVelocity = this.RigidBody.Velocity;
    var projectedVelocity = Math.ProjectOnVector(currentVelocity, movement);
    if (Math.Dot(projectedVelocity, movement) < 0)
      projectedVelocity = Real3.Zero;
    
    var blendedVelocity = Math.Lerp(currentVelocity, projectedVelocity, 0.3);
    
    this.RigidBody.Velocity = blendedVelocity + movement * scale;
  }
  function Server_OnNetChannelIncomingPropertyChanged(event : NetChannelPropertyChange)
  {
    // Ex. This is the best place to handle "toggled" property logic or property logic with a clear "begin" / "end".
    // This could include things like player crouching ("toggled") or starting an attack and ending an attack (clear "begin" / "end").
    
    // Get the current property value from the property that was just changed.
    var propertyValue : Boolean = false;
    if(event.PropertyName == "InputUp")
      propertyValue = this.InputUp;
    else if(event.PropertyName == "InputDown")
      propertyValue = this.InputDown;
    else if(event.PropertyName == "InputLeft")
      propertyValue = this.InputLeft;
    else if(event.PropertyName == "InputRight")
      propertyValue = this.InputRight;
    else
      return;
    
    // Print whether or not that input was pressed or released.
    if(propertyValue)
      Console.WriteLine("`this.PlayerInfo` Pressed `event.PropertyName` at `event.Timestamp`s");
    else
      Console.WriteLine("`this.PlayerInfo` Released `event.PropertyName` at `event.Timestamp`s");
  }
}
